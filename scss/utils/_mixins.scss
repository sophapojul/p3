$breakpoints: (
  "thin": 320px,
  "small": 768px,
  "medium": 992px,
  "large": 1200px,
  "xlarge": 1440px,
) !default;
/// Mixin to manage responsive breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
@mixin flex($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
@mixin circle($width, $height, $color) {
  width: $width;
  height: $height;
  border-radius: 50%;
  background: $color;
}
@mixin rotate($deg) {
  transform: rotate($deg);
}
@mixin fade($fade, $timing, $delay, $count, $fill) {
  animation: $fade $timing $delay;
  animation-iteration-count: $count;
  animation-fill-mode: $fill;
}
// @mixin pseudo($loc: before, $content: "", $pos: absolute) {
//   position: relative;
//   &::#{$loc} {
//     content: $content;
//     position: $pos;
//     @content;
//   }
// }
@mixin pseudo(
  $display: block,
  $pos: absolute,
  $content: "",
  $width: 100%,
  $height: 100%
) {
  content: $content;
  display: $display;
  position: $pos;
  width: $width;
  height: $height;
  @content;
}
// @mixin transition($prop, $time, $easing: ease-in, $delay: 0s) {
//   $transition: ();
//   @for $i from 1 through length($prop) {
//     @for $j from 0 to (length($prop)) - (length($time)) {
//       $time: join($time, nth($time, -1));
//     }
//     @for $j from 0 to (length($prop)) - (length($easing)) {
//       $easing: join($easing, nth($easing, -1));
//     }
//     @for $j from 0 to (length($prop)) - (length($delay)) {
//       $delay: join($delay, nth($delay, -1));
//     }

//     $transition: append(
//       $transition,
//       (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),
//       $separator: comma
//     );
//   }
//   transition: $transition;
// }
@mixin css3-prefix($prop, $value) {
  -webkit-#{$prop}: #{$value};
  -moz-#{$prop}: #{$value};
  -ms-#{$prop}: #{$value};
  -o-#{$prop}: #{$value};
  #{$prop}: #{$value};
}
